import json
from agent.state import AgentState
import asyncio
from typing import Dict, Any, List

from data.embeddings import get_embedding
from data.pinecone.connection import get_index, init_pinecone

async def execute_pinecone_query(query: str, filters: Dict[str, Any] = None) -> List[Dict[str, Any]]:
    """
    Execute a Pinecone vector search query.
    This is a placeholder function that would be replaced with actual Pinecone client code.
    """
    # Placeholder implementation - in a real system, you would:
    pc = init_pinecone()
    index = get_index(pc)
    query_vector = get_embedding(query)
    results = index.query(query_vector, top_k=10, include_metadata=True)
    return results
    

def pinecone_search(state: AgentState) -> AgentState:
    """
    Pinecone search node that executes the query generated by the reasoning node
    """
    # Get the Pinecone query from state
    pinecone_query = state.get("pinecone_query", "")
    
    if not pinecone_query:
        # If no Pinecone query is provided, return empty results
        return
    
    # In a real implementation, you would execute the query asynchronously
    results = asyncio.run(execute_pinecone_query(pinecone_query))
    print(results)
    # Store the results in the state
    
    return {"pinecone_results": results}
