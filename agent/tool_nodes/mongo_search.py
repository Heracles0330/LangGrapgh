import json
from agent.state import AgentState
import asyncio
from typing import Dict, Any, List
from data.mongodb.connection import get_collection
import json
from bson import json_util

def parse_mongo_aggregation(agg_string):
    """
    Parse a MongoDB aggregation pipeline string into a Python list of dictionaries.
    
    Examples of valid formats:
    1. Single-stage: '[{"$match": {"prices.Each": {"$gt": 100}}}]'
    2. Multi-stage: '[{"$match": {"prices.Each": {"$gt": 100}}}, {"$project": {"sku": 1}}]'
    """
    try:
        # First, determine if it's already in array format or needs to be wrapped
        agg_string = agg_string.strip()
        if not agg_string.startswith('['):
            # Try to see if it's a single stage object
            if agg_string.startswith('{'):
                agg_string = f"[{agg_string}]"
            else:
                # If it's a comma-separated list of stages without brackets
                agg_string = f"[{agg_string}]"
        
        # Parse using json_util to handle MongoDB-specific types
        pipeline = json.loads(agg_string, object_hook=json_util.object_hook)
        print(pipeline)
        return pipeline
    
    
    except json.JSONDecodeError as e:
        print(f"Error parsing aggregation pipeline: {e}")
        # Try to fix common errors
        if "Expecting property name" in str(e):
            # This might be because of unquoted keys, try to add quotes
            import re
            # Replace unquoted keys with quoted keys
            fixed_string = re.sub(r'(\s*)([$\w]+)(\s*:)', r'\1"\2"\3', agg_string)
            try:
                pipeline = json.loads(fixed_string, object_hook=json_util.object_hook)
                return pipeline
            except Exception:
                pass
        
        # If we can't automatically fix it, return a simple query
        return [{"$match": {}}]
async def execute_mongo_query(query_str: str) -> List[Dict[str, Any]]:
    """
    Execute a MongoDB query.
    This is a placeholder function that would be replaced with actual MongoDB client code.
    """
    # Placeholder implementation - in a real system, you would:
    collection = get_collection()
    results = list(collection.aggregate(parse_mongo_aggregation(query_str)))
    return results
    

def mongo_search(state: AgentState) -> AgentState:
    """
    MongoDB search node that executes the query generated by the reasoning node
    """
    new_state = {**state}
    
    # Get the MongoDB query from state
    mongo_query = state.get("mongo_query", "")
    
    if not mongo_query or mongo_query == "":
        # If no MongoDB query is provided, return empty results
        return
    
    # In a real implementation, you would execute the query asynchronously
    try:
        results = asyncio.run(execute_mongo_query(mongo_query))
        return {"mongo_results": results}
    except Exception as e:
        return {"mongo_results": []}
       
    